{"version":3,"sources":["px2vmin.js","App.js","serviceWorker.js","index.js"],"names":["PxTable","props","state","tablelist","tablelist100","width","this","_markData","x","i","push","px","vw375","_formatDigt","vw750","setState","x1","j","s_x","String","length","substr","c","copy","className","map","item","index","key","onClick","onCopy","title","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPA8HeA,E,kDAzHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAW,GACXC,aAAc,GACdC,MAAO,KALQ,E,gEAgBjBC,KAAKC,c,kCAKL,IADA,IAAIC,EAAI,GACCC,EAAI,EAAGA,GAAK,IAAKA,IACxBD,EAAEE,KAAK,CACLC,GAAIF,EACJG,MAAON,KAAKO,YAAYJ,EAAG,KAC3BK,MAAOR,KAAKO,YAAYJ,EAAG,OAG/BH,KAAKS,SAAS,CACZZ,UAAWK,IAIb,IADA,IAAIQ,EAAK,GACAC,EAAI,IAAKA,GAAK,IAAKA,GAAG,EAC7BD,EAAGN,KAAK,CACNC,GAAIM,EACJL,MAAON,KAAKO,YAAYI,EAAG,KAC3BH,MAAOR,KAAKO,YAAYI,EAAG,OAG/BX,KAAKS,SAAS,CACZX,aAAcY,M,sEASNR,GACV,IAAMU,EAAMC,OAAW,IAAJX,GACnB,OAAGU,EAAIE,QAAU,IACLF,EAAIG,OAAO,EAAG,GAEf,IAAJb,I,6BAGFc,GACLC,IAAKD,K,+BAGG,IAAD,SAC6BhB,KAAKJ,MAAjCC,EADD,EACCA,UAAWC,EADZ,EACYA,aAEnB,OAAGD,GAAkC,IAArBA,EAAUiB,OACf,KAGT,yBAAKI,UAAU,WACb,+BACE,+BACE,4BACI,4CACA,mCACA,oCAEHrB,EAAUsB,KAAI,SAACC,EAAMC,GAClB,OACA,wBAAIC,IAAK,KAAOD,GACZ,4BAAKD,EAAKf,GAAV,MACA,wBAAIkB,QAAS,WAAK,EAAKC,OAAOJ,EAAKd,MAAQ,OAAQmB,MAAM,4BACxDL,EAAKd,MAAQ,MAEd,wBAAIiB,QAAS,WAAK,EAAKC,OAAOJ,EAAKZ,MAAQ,OAAQiB,MAAM,4BACxDL,EAAKZ,MAAQ,YAO1B,+BACE,+BACE,4BACI,4CACA,mCACA,oCAEHV,EAAaqB,KAAI,SAACC,EAAMC,GACrB,OACA,wBAAIC,IAAK,KAAOD,GACZ,4BAAKD,EAAKf,GAAV,MACA,wBAAIkB,QAAS,WAAK,EAAKC,OAAOJ,EAAKd,MAAQ,OAAQmB,MAAM,4BACxDL,EAAKd,MAAQ,MAEd,wBAAIiB,QAAS,WAAK,EAAKC,OAAOJ,EAAKZ,MAAQ,OAAQiB,MAAM,4BACxDL,EAAKZ,MAAQ,iB,GA5GZkB,aCSPC,MARf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,QCIcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0dfcdc73.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport copy from 'copy-text-to-clipboard';\r\n\r\n\r\nclass PxTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tablelist: [],\r\n      tablelist100: [],\r\n      width: 375,\r\n    };\r\n  }\r\n\r\n  //   static getDerivedStateFromProps(props, state) {\r\n  //     return {\r\n  //       tablelist: props.tablelist,\r\n  //     };\r\n  //   }\r\n\r\n  componentDidMount() {\r\n    this._markData();\r\n  }\r\n\r\n  _markData(){\r\n    var x = [];\r\n    for (var i = 3; i <= 100; i++) {\r\n      x.push({\r\n        px: i,\r\n        vw375: this._formatDigt(i /375),\r\n        vw750: this._formatDigt(i /750),\r\n      });\r\n    }\r\n    this.setState({\r\n      tablelist: x,\r\n    });\r\n\r\n    var x1 = [];\r\n    for (var j = 100; j <= 750; j+=5) {\r\n      x1.push({\r\n        px: j,\r\n        vw375: this._formatDigt(j /375),\r\n        vw750: this._formatDigt(j /750),\r\n      });\r\n    }\r\n    this.setState({\r\n      tablelist100: x1,\r\n    });\r\n\r\n\r\n  }\r\n\r\n\r\n  mounting() {}\r\n\r\n  _formatDigt(x){\r\n    const s_x = String(x * 100);\r\n    if(s_x.length >= 15){\r\n        return +s_x.substr(0, 6)\r\n    }\r\n    return x * 100;\r\n  }\r\n\r\n  onCopy(c){\r\n    copy(c);\r\n  }\r\n\r\n  render() {\r\n    const { tablelist, tablelist100 } = this.state;\r\n\r\n    if(tablelist && tablelist.length === 0){\r\n        return null;\r\n    }\r\n    return (\r\n      <div className=\"pxtable\">\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n                <th>单位</th>\r\n                <th>375</th>\r\n                <th>750</th>\r\n            </tr>\r\n            {tablelist.map((item, index)=>{\r\n                return (\r\n                <tr key={'tr' + index}>\r\n                    <td>{item.px}px</td>\r\n                    <td onClick={()=>{this.onCopy(item.vw375 + 'vw')}} title=\"点击复制\">\r\n                    {item.vw375 + 'vw'}\r\n                    </td>\r\n                    <td onClick={()=>{this.onCopy(item.vw750 + 'vw')}} title=\"点击复制\">\r\n                    {item.vw750 + 'vw'}\r\n                    </td>\r\n                </tr>\r\n                )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n                <th>单位</th>\r\n                <th>375</th>\r\n                <th>750</th>\r\n            </tr>\r\n            {tablelist100.map((item, index)=>{\r\n                return (\r\n                <tr key={'tr' + index}>\r\n                    <td>{item.px}px</td>\r\n                    <td onClick={()=>{this.onCopy(item.vw375 + 'vw')}} title=\"点击复制\">\r\n                    {item.vw375 + 'vw'}\r\n                    </td>\r\n                    <td onClick={()=>{this.onCopy(item.vw750 + 'vw')}} title=\"点击复制\">\r\n                    {item.vw750 + 'vw'}\r\n                    </td>\r\n                </tr>\r\n                )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default PxTable;\r\n","import React from 'react';\nimport './App.css';\n\nimport PxTable from './px2vmin.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PxTable></PxTable>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}