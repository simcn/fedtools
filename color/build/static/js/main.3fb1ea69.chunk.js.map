{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ColorNode","props","hisData","outRGB","Object","keys","className","map","items","item","ColorItem","rgb","rgb2hex","style","backgroundColor","hex","onClick","c","copy","toLocaleUpperCase","color","App","useState","upHisData","img","upImg","ref2","useRef","document","createElement","ctx","getContext","getblob","blob","x","URL","createObjectURL","pasteData","event","a","navigator","permissions","query","name","then","result","state","clipboard","read","data","i","length","types","includes","getType","alert","imgLoad","width","current","height","drawImage","pdata","getImageData","out","j","join","cas","placeholder","onPaste","e","ref","src","alt","onLoad","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gQAoFA,IAAMA,EAAY,SAACC,GACjB,IAAOC,EAAWD,EAAXC,QACP,GAAe,KAAZA,EACD,OAAO,KAET,IAAIC,EAASC,OAAOC,KAAKH,GACzB,OACE,qBAAKI,UAAU,UAAf,SACGH,EAAOI,KAAI,SAACC,GAAD,OAAU,cAAC,EAAD,CAAWC,KAAMD,UAKvCE,EAAY,SAACT,GAEjB,IAAOQ,EAAQR,EAARQ,KACDE,EAAMC,IAAQ,OAAUH,EAAO,KAUrC,OACE,sBAAKH,UAAU,QAAQO,MAAO,CAACC,gBAAgBH,EAAII,KAAMC,QAAS,WAPrD,IAACC,IAOgEN,EAAII,IANlFG,YAAKD,EAAEE,sBAMP,UACE,8BAAMR,EAAII,MACV,qBAAKF,MAAO,CAACO,MAAM,WAAnB,SAAgCT,EAAII,UAoC3BM,EA5If,WAEE,MAA6BC,mBAAS,IAAtC,mBAAOpB,EAAP,KAAgBqB,EAAhB,KACA,EAAqBD,mBAAS,IAA9B,mBAAOE,EAAP,KAAYC,EAAZ,KAEMC,EAAOC,iBAAO,IACdV,EAAIW,SAASC,cAAc,UAC3BC,EAAMb,EAAEc,WAAW,MAiBnBC,EAAU,SAACC,GACf,IAAIC,EAAIC,IAAIC,gBAAgBH,GAC5BR,EAAMS,IAMFG,EAAS,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDAChBC,UAAUC,YAAYC,MAAM,CAC1BC,KAAM,mBACLC,MAAK,SAACC,GACc,YAAjBA,EAAOC,OAAwC,WAAjBD,EAAOC,OACvCN,UAAUO,UAAUC,OAAOJ,MAAK,SAACK,GAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAC1BD,EAAKC,GAAGE,MAAMC,SAAS,aAG1BJ,EAAKC,GAAGI,QAAQ,aAAaV,KAAKZ,GAFlCuB,MAAM,kFARA,2CAAH,sDAkBTC,EAAU,YA1CJ,SAACvC,EAAGa,GAEdb,EAAEwC,MAAQ/B,EAAKgC,QAAQD,MACvBxC,EAAE0C,OAASjC,EAAKgC,QAAQC,OACxB7B,EAAI8B,UAAUlC,EAAKgC,QAAS,EAAG,GAK/B,IAJA,IACIG,EADS/B,EAAIgC,aAAa,EAAG,EAAGpC,EAAKgC,QAAQD,MAAO/B,EAAKgC,QAAQC,QAClDV,KAEfc,EAAM,GACDC,EAAI,EAAGA,EAAIH,EAAMV,OAAQa,GAAK,EAErCD,EADU,CAACF,EAAMG,GAAGH,EAAMG,EAAI,GAAGH,EAAMG,EAAI,IAAIC,KAAK,MACzC,CAACJ,EAAMG,GAAGH,EAAMG,EAAI,GAAGH,EAAMG,EAAI,IAE9CzC,EAAUwC,GA8BVG,CAAIjD,EAAGa,IAMT,OAAQ,sBAAKxB,UAAU,WAAf,UACN,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,MAAf,SACE,cAAC,EAAD,CAAWJ,QAASA,QAGxB,sBAAKI,UAAU,OAAf,UACE,kFACA,qBAAKA,UAAU,WAAf,SACE,0BAAU6D,YAAa,2EAAgBC,QAAS,SAACC,GAAQhC,EAAUgC,QAGrE,8BAAK,qBAAKC,IAAK5C,EAAM6C,IAAK/C,EAAKgD,IAAI,GAAGC,OAAQ,WAAKjB,gBClE1CkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxD,SAASyD,eAAe,SAM1BX,M","file":"static/js/main.3fb1ea69.chunk.js","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useRef\n} from 'react';\nimport copy from 'copy-text-to-clipboard';\nimport rgb2hex from 'rgb2hex';\nimport './App.css';\n\nfunction App() {\n\n  const [hisData, upHisData] = useState('');\n  const [img, upImg] = useState('');\n\n  const ref2 = useRef('');\n  const c = document.createElement(\"canvas\");\n  const ctx = c.getContext(\"2d\");\n  const cas = (c, ctx) => {\n    // console.log(_img.width)\n    c.width = ref2.current.width;\n    c.height = ref2.current.height;\n    ctx.drawImage(ref2.current, 0, 0);\n    var imageD = ctx.getImageData(0, 0, ref2.current.width, ref2.current.height);\n    var pdata = imageD.data;\n\n    var out = {};\n    for (var j = 0; j < pdata.length; j += 4) {\n      let key = [pdata[j],pdata[j + 1],pdata[j + 2]].join(',');\n      out[key] = [pdata[j],pdata[j + 1],pdata[j + 2]];\n    }\n    upHisData(out);\n  }\n\n  const getblob = (blob) => {\n    var x = URL.createObjectURL(blob);\n    upImg(x);\n  }\n\n  // TODO 锐化图片\n\n\n  const pasteData = async (event) => {\n    navigator.permissions.query({\n      name: \"clipboard-read\"\n    }).then((result) => {\n      if (result.state === \"granted\" || result.state === \"prompt\") {\n        navigator.clipboard.read().then((data) => {\n          for (let i = 0; i < data.length; i++) {\n            if (!data[i].types.includes(\"image/png\")) {\n              alert(\"只能接收剪切板输出的图片\");\n            } else {\n              data[i].getType(\"image/png\").then(getblob);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  const imgLoad = () => {\n    cas(c, ctx);\n  }\n\n  // upHisData(['#ffffff'])\n\n\n  return (<div className=\"colorBox\" >\n    <div className=\"rbox\">\n      <div className=\"his\">\n        <ColorNode hisData={hisData}></ColorNode>\n        </div>\n    </div>\n    <div className=\"lbox\">\n      <h2>从剪切板贴入图片</h2>\n      <div className=\"inputbox\" >\n        <textarea placeholder={'只能接收剪切板输出的图片'} onPaste={(e) => { pasteData(e) }} ></textarea>\n      </div>\n      {/* style={{'transform':' scale(0.5)'}} */}\n      <div><img ref={ref2} src={img} alt=\"\" onLoad={()=>{imgLoad()}}></img></div>\n    </div>\n  </div>\n  );\n}\n\nconst ColorNode = (props) => {\n  const {hisData} = props;\n  if(hisData === ''){\n    return null;\n  }\n  let outRGB = Object.keys(hisData);\n  return (\n    <div className=\"his-box\">\n      {outRGB.map((items)=>(<ColorItem item={items}></ColorItem>))}\n    </div>\n  )\n}\n\nconst ColorItem = (props) => {\n\n  const {item} = props;\n  const rgb = rgb2hex('rgb(' +  item + ')');\n\n  // toString\n\n  const onCopy = (c)=>{\n    copy(c.toLocaleUpperCase());\n  }\n\n\n\n  return (\n    <div className=\"items\" style={{backgroundColor:rgb.hex}} onClick={()=>{onCopy(rgb.hex)}}>\n      <div>{rgb.hex}</div>\n      <div style={{color:\"#ffffff\"}}>{rgb.hex}</div>\n    </div>\n  )\n}\n\n\n\n// const App365 = () => {\n//   const datas = [];\n//   var x = 0;\n//   for (var i = 0; i < 365; i++) {\n//     datas.push(i + 1)\n//     x += i;\n//   }\n\n//   console.log(x);\n//   return (<\n//     div className=\"page_app365\" >\n//     <\n//     h2 > h2 < /h2> <\n//     div className=\"app365\" > {\n//           datas.map((item) => {\n//             return (<\n//           div key={\n//                 'datas' + item\n//               } > {\n//                 item\n//               } < /div>\n//               )\n//       })\n//     } <\n//     /div> <\n//     /div>\n//               )\n// }\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}